#!/bin/bash
. ansi.sh
. fn.readcountdown

# highlight --styles
#   Lang prefs:
#     python candidates
#       andes blacknblue bluegreen candy dusk freya kellys
#		lucretia molokai moria navy neon
themes_hi_python=(
       andes blacknblue bluegreen candy dusk freya
		kellys lucretia molokai moria navy neon
)
themes_hi_python=(
       dusk neon
)
hi_theme=neon

get_themes_hi () {
	hi_theme_dir=/usr/share/highlight/themes
	cd -- "$hi_theme_dir"
	ls *.theme | sed -e 's/\.theme$//'
}


eval=1
eval=

usage () {
	cat <<EOT
	-c) highlight_cmd  Override (not implemented)
	-l) syntax     Language
	-t) timeout    Prompt for copy-to-clibpard (def 30)
	-C) nocopy     Don't prompt or copy to clipboard
	-s) syncol     Set to anything to use gnu syntax-highlight
	-h) help
	-E) evaluate   Show all themes (for `highlight` only)
	-v) verbose    No you shhh.
EOT
}

display_file() {
	local timeout=30 syntax filename syncol verbose highlight_cmd

	while getopts "c:l:t:Cs:hEv" opt; do
		case ${opt} in
			c) highlight_cmd="${OPTARG}" ;;
			l) syntax="${OPTARG}" ;;
			t) timeout="${OPTARG}" ;;
			C) nocopy=1 ;;
			s) syncol=1 ;;
			h) help=1 ;;
			E) evaluate=1 ;;
			v) verbose=1 ;;
			\?) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
			:) echo "Option -$OPTARG requires an argument." >&2; return 1 ;;
		esac
	done
	shift $((OPTIND -1))
	if [[ -n $help ]]; then usage; exit; fi

	# If -l is not present, read the second line of the file (assuming it's the shebang)
	# echo "Syntax: {$syntax}"
	filename="$1"
	# echo "Filename: {$filename}"

		##################################################
		## Syntax coming from -l option
	if [[ -n "$syntax" ]]; then
		case "$syntax" in
			*python*) syntax="python" ;;
		esac
	else
		##################################################
		## No syntax, so try to determine from shebang
		[[ -n $verbose ]] && {
			echo -n "Running sed: "
			sed -n '2p' "$filename"
		}
		[[ -n $verbose ]] && echo "Done. Getting shebang from line 2..."
		read -r shebang < <(sed -n '2p' "$filename")
		[[ -n $verbose ]] && echo "Shebang: {$shebang}"
		# Parse out the language from the shebang
		case "$shebang" in
			*bin/bash*) syntax="bash" ;;
			*python*) syntax="python" ;;
			*bin/perl*) syntax="perl" ;;
			*)	echo "Unknown shebang. Setting blank syntax." >&2
				syntax=""
				;;
		esac
		[[ -n $verbose ]] && echo "Syntax chosen: $syntax"
	fi

	# Save file content into a variable
	local content=$(tail -n +2 "$filename")

	# Highlight and display the file (excluding the first two lines)
	if [[ $syntax = '' ]]; then
		printf '%s' "$content" >&2
	else
		if [[ -z syncol ]];  then
			#printf '%s' "$content" | source-highlight -f esc256 -o STDOUT -O truecolor -s "$syntax" --style-file esc256.style >&2
			printf '%s' "$content" | source-highlight -f esc256 -o STDOUT -s "$syntax" --style-file esc256.style >&2
		else
			theme=$hi_theme
			if [[ -z $eval ]]; then
				printf '%s' "$content" |
					highlight -S "$syntax" \
						--style "$theme" \
						-O truecolor >&2
			else
				themes=(${themes_hi_python[@]})
				# themes=($(get_themes_hi))
				for theme in "${themes[@]}"; do
					echo "$bgblu${yel} ==== Theme: $theme  $rst"
					printf '%s' "$content" |
						highlight -S "$syntax" \
							--style "$theme" \
							-O truecolor >&2
				done
			fi
		fi
	fi
	echo

	# Prompt for copy to clipboard
	if [[ -z $nocopy ]]; then
		readcountdown1 "$timeout" ans "$bgblu${yel} Copy to clipboard? (${timeout}s) $rst (Y/${bcya}n$rst) "
		[[ $ans = '' || $ans = y* || $ans = Y* ]] && printf '%s' "$content" | xc && echo "Copied to clipboard" >&2
	fi
}

display_file "$@"
